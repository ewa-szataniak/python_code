
"""
Sum Of Pairs:
https: // www.codewars.com/kata/54d81488b981293527000c8f 

"""
def sum_pairs(ints, s):
    my_set = set()
    for num in ints:
        if s - num in my_set:
            return [s - num, num]
        my_set.add(num)

""" 
Explanation:

This code helps us find a pair of numbers from a list of numbers (ints), whose sum is equal to s.
To do this, the code takes the list of numbers(ints) and the target sum(s) as input.
Then it creates an empty set called my_set. Next, it checks each number in the list(ints). For each number, it checks whether s minus that number is already in my_set. If it is , then it means we have found a pair of numbers whose sum is equal to s. So, the code returns those two numbers in a list. If the code goes through the entire list without finding a pair of numbers whose sum is equal to s, then it means that such a pair doesn't exist in the list. 

-------------------------

Time & space complexity: 

This is an efficient solution, where time complexity is going together with input size linearly: O(n).This is because in the worst-case scenario, when the required pair is not found, we go through the entire list one time. Therefore, as the number of integers increases, the time taken to execute the function increases linearly. 
The space complexity is the the same O(n), linear, because we are creating an additional my_set to store the numbers from the list. As we have more and more numbers to work with, the amount of space needed to run the function also goes up in a straight line. """
